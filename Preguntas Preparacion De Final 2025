Ejercicio 1. Dar un algoritmo que decida si dos expresiones regulares denotan el mismo lenguaje. Justificar la correctitud.
Primero derivamos las E.R y obtenemos sus respectivos automatas (los asumimos Deterministicos pero si no lo fuesen los determinizamos como ya sabemos)
Llamamos A1={Q1,Σ,δ1,Q01,F1} al AFD que reconoce a ER1 y A2={Q2,Σ,δ1,Q02,F2} al AFD que reconoce a ER2
¿L1(A1)= L2(A2)? Para ver esto tenemos que ver la doble inclusion de los lenguajes.
L1 ⊆ L2 <--> L1 n (Σ* \ L2) = ∅ y L2 ⊆ L1 <--> L2 n (Σ* \ L1) = ∅ 
Luego, podemos construir los automatas que reconocen la interseccion pues los lenguajes reg. estan cerrados por interseccion (Σ* \ L es regular),
ahora para probar que la interseccion es vacia hay dos formas:
1. Lema de Pumping para lenguajes regulares: supongamos que L es reg, luego podemos probar que si no hay ninguna palabra entre n y 2n-1 no habra palabras 
mas grandes que ellas (pues serian necesariamente su concatenacion), queda probar que es vacio para las palabras menore a la const. de Pumping; dado que la
const de Pumping viene dada por la minima cantidad de estados del automata, podemos construir un AFD y ver que esta no acepte nada como veremos a continuacion .
2. ver que no lleguen a ningun estado final. Con probarlo con todas las permutaciones de simbolos para cadenas de tamaño menores a la ctte de Pumping ya 
sabremos entonces que el lenguaje es vacio; esto se debe hacer de algun modo sistematico de modo que no se dejen combinaciones fuera (BFS,DFS).
Luego, es claro que si alguna de las dos inclusiones no se cumple las E.R no eran equivalentes. Reconstruimos ahora el automata que sera la interseccion de
estos dos automatas, y por tanto el que acepte el lenguaje esperado.
A= A1xA2= {Q1xQ2,Σ,δ,(q01,q02),F1xF2} tal que L(A) = L(A1)n L(A2) donde δ: (Q1XQ2)XΣ -->(Q1xQ2), 
δ((p,q),a)-> (δ1(p,a),δ2(q,a)) para todo a en Σ y para todo (p,q) en Q1xQ2.
L(A)= {w ∈ Σ*: δ((q01,q02),w) ∈ F1xF2} =  (δ^)={δ((q01,q02),w) ∈ F1xF2}.

Ejercicio 2. Dar dos algoritmos distintos para determinar si el lenguaje aceptado por un automata finito dado es el conjunto de todas las cadenas del alfabeto. Justificar cada uno.
Para dar el algoritmo notamos que lo que se nos pide es ver que L(a) = Σ*, luego tenemos dos formas de proceder:
Alg 1: como el automata dado es finito, construimos su complemento y recorremos sistematicamente el automata para ver si reconoce alguna palabra, si lo hace entonces es claro que es falso.
Alg 2: usaremos el lema de Pumping para intentar encontrar una palabra que, deberia estar entre n y 2n -1 pero no esta, luego con esto nos alcanzara para demostrar que el automata no reconoce lo pedido.
Sea α = xyz una descomposicion de una palabra perteneciente al lenguaje, |α| >= N, entonces xy^iz debe pertenecer al lenguaje para todo i >= 0.
Usaremos una prop. intermedia para la demo: L ⊆ Σ* es finito <--> para todo w ∈ Σ*, |w| >= N, W ∉ L, con N la cte de Pumping.
Ahora, sabemos que no hace falta buscar para todos los N + k k >=0 mayores si no en el intervalo [N,2n).
=>) si L es finito, entonces queremos ver que no hay ningun w ∈ L tq |w| >= N, pues si lo hay entonces el conjunto sera infinito, esto es un absurdo por lo tanto solo tendremos palabras entre [o,N)
<=) como para todo w ∈ Σ*, |w| >= N, W ∉ L entonces L solo tendra palabras de tamaño menor a N o L es vacio, esto es un conjunto finito.
Habiendo demostrado la prop, podemos asegurar que si no encontramos ninguna palabra en el intervalo [N,2n) nos bastara para afirmar que el conj. es finito y nunca podra ser todas las cadenas del 
alfabeto. Si ademas faltase alguna combinacion en el intervalo [0,n) es claro que tampoco sera todas las cadenas del alfabeto pues faltaran palabras, esto se puede ver con un AF.

Ejercicio 3. Dar un algoritmo que determine si un lenguaje regular dado es infinito. Justificar.
Para ver que un lenguaje regular dado va a ser infinito nos alcanza con buscar en el intervalo de palabras de long. [N,2n), pues sabemos que con lema de Pumping todo lo bombeado sera infinito.
Sea  α = xyz una descomposicion de una palabra perteneciente al lenguaje, |α| >= N, entonces xy^iz debe pertenecer al lenguaje para todo i >= 0.
Demostracion: supongamos que L es infinito, pero no tiene palabras de long [N,2n), luego sea  α' = xy^iz la descomposicion para la palambra mas chica de L,sabemos |α'|>= 2N, sabemos que |y| >= 1 y
|xy|<=n  por lo tanto 0 < |y| <= N, luego por bombeo con i= 0  2N <=  |α'| < 2N - N (en el caso |Y| = N) esto es |α'|-|y| osea 2N <=  |α'| < N lo cual es un absurdo, y para cada tamaño de Y
en el intervalo [1,N] cubre el intervalo  [N,2n).

Ejercicio 4.¿Cuantos automatas finitos deterministas con dos estados pueden construirse sobre el alfabeto {0, 1}?
Para calcular esto necesitamos tener en cuenta(generico):
1. La cantidad de estados inicales distintos que podemos tener (viene dado por el diccionario)
2. La cantidad de δ que podemos dar para el alfabeto cumpliendo con ser deterministas.
3. La cantidad de estados finales.
 desarrollando un poco: 
1. es |Q| una vez que tenemos armado un automata podemos hacer que todos sus estados sean iniciales uno por uno(no simultaneamente)
2. cantidad de funciones a lo algebra 1 (f: A-> B #f = B^A) en el caso de δ: QxΣ -> Q esto es: |Q|^(|Q|x|Σ|)
3. esto es basicamente un partes de Q (este estado es final? si o no) 2^Q
Total: |Q|x |Q|^(|Q|x|Σ|)x2^Q

Ejercicio 5.Sean L1 y L2 lenguajes regulares incluidos en Σ∗. Hacer un AFD con dos cintas de entrada que reconoce el lenguaje L = {(u, v) : u ∈ L1, v ∈ L2, |u| = |v|}
Sea M1= {Q1,Σ,δ1,q01,F1} el AFD que reconoce L1 y sea M2= {Q2,Σ,δ2,q02,F2} el AFD que reconoce a L2, queremos construir un AFD A tal que L(A) = L, luego notamos que lo que necesitamos es que los pares
(u,v) sean reconocidos por sus respectivos automatas, para ello definiremos A= {Q,Σ,δ,(q01,q02),F1xF2} donde Q = Q1XQ2,y definiremos:
δ1: Q1xΣ -> Q1, δ2: Q2xΣ -> Q2, δ: (Q1xQ2)x(ΣxΣ) -> Q. δ= {(p,q) ∈ Q1xQ2, (a,b) ∈ ΣxΣ : δ((p,q),(ab))= (δ1(p,a),δ2(q,b)) ∈ Q} =  δ(^)={δ((q01,q02),(a,b)) ∈ F1xF2}

Ejercicio 6. Decir Verdadero o Falso y justificar:
1. Para cada AF hay infinitos AFD que reconocen el mismo lenguaje.Verdadero
Justificacion: dos automatas con estados A,B,C y Q0,Q1,Q2 con iguales transiciones estados finales, estado inicial etc son iguales. Ademas si el AFD original tiene un estado trampa explicito, siempre
podemos hacerlo que transicione a un nuevo estado trampa_n ad infinitum.
2. Si L es libre de contexto, todo subconjunto de L es libre de contexto. Falso.
Sea L={a^nb^nc^m|n,m >= 0} es un lenguaje libre de contexto (lee igual cantidades de a y b y luego solo consume c) pero el subconjunto {a^nb^nc^n|n >= 0} no es libre de contexto
3. Los automatas finitos determinısticos reconocen una cadena de longitud n en exactamente n transiciones. Verdadero
Un automata finito va a transicionar los N simbolos de su cadena y por mas que pase por un e.f. en el camino solo lo aceptara si esta en un estado final, si lo pensamos como un grafo (y sabiendo AFD)
esto es solo tiene un camino a recorrer.
4. Los automatas de pila determinısticos reconocen una cadena de longitud n en exactamente n transiciones.Falso
Basta con apilar un lenguaje regular {a^n| n>0} y hacer que cuando termina de consumir a,Z0/Z0 simplemente pase por lambda,Z0/Z0 al estado final, luego esto termina en mas de n pasos y el AP es determ. 
5. Las maquinas de Turing determinısticas reconocen una cadena de longitud n en exactamente n transiciones.Falso
Una MTD si bien tiene bien definidas sus transiciones, puede estar chequeando cosas que necesiten mas de una pasada en la cinta lo cual lleva mas de N transiciones (algun lenguaje que tenga mas de 2 cosas
a contar ya no es un AP y la MT no puede contar todo de una pasada).
6. Sea M un AFD y sea M^R el automata que resulta de revertir funcion de transicion. L(M) interseccion L(M^R) es regular. Verdadero
El automata resultante de revertir la funcion de transicion sera finito(posiblemente no det.) pues simplemente estamos 'cambiando el sentido de las flechas' luego la interseccion de lenguajes 
regulares es regular

Ejercicio 7. Indicar Verdadero o Falso y justificar:
1. Toda funcion total de N en N es computable.Falso
F(x)= { x+1 sii Halt(x,x) =1; 0 caso contrario}
2. El conjunto de funciones parcialmente computables de N en N es c.e.Verdadero
Por teorema, sabemos que A={f(x) : f(x)↓} es c.e, luego esto es extensible a todas las funciones p.c

Ejercicio 8. Indicar V o F y justificar. Es decidible que
1. La interseccion de dos conjuntos c.e. es un conjunto c.e.Verdadero
Los c.e estan cerrados por union e interseccion.
2. La clausura de Kleene de un lenguaje c.e. es c.e. Verdadero
Fijamos una codificacion para un alfabeto (numerable),
3. La clausura de Kleene de lenguaje computable es computable.Verdadero
partimos de que L es computable, luego L*= U(t>=0)L^t (utoria desde L = 0 hasta inf) luego podemos reescribir cada L^t como
L^t = {w ∈ Σ *: w= U_1.U_2....U_i tq U_j ∈ L, 1 <= j <= i, |w| = t} o lo que es equivalente L^t= L.L^t-1, lo que se puede demostrar inductivamente tambien
es computable pues L es computable.
4. La clausura de Kleene de un lenguaje regular es regular.Verdadero
La clausura de Kleene de un leng regular L es la utoria infinita de cadenas w ∈ L, lo cual puede descomponerse en uniones finitas de cadenas U1...Un ∈ L,
luego la union finita de lenguajes regulares es regular. Basta con dar un AF que reconozca L y hacer transiciones lambda desde los estados finales al inicial.
5. La clausura de Kleene de un lenguaje libre de contexto es libre de contexto.Verdadero
Los lenguajes libres de contexto son cerrados por union, luego la clausura de Kleene de un leng lib. de ctxto L* sera la union infinita de cadenas ∈ L,
por tanto basta con que esas descomposiciones sean aceptadas por L.
6. La reversa de un lenguaje computable es computable.Verdadero
Para esto usaremos dos maquinas de Turing: la primera que consume w ∈ L normalmente (pues L es computable), y una segunda que a medida que la primer MT 
consume cadena va escribiendo en su cinta la cadena reversa, luego corre en la primer MT y si esta rechaza entonces w^r es rechazada, caso contrario es aceptada.
7. La reversa de un lenguaje c.e es c.e. Verdadero
Para que un lenguaje sea c.e tiene que haber una funcion total computable f: N -> Σ*, luego L ⊆ Σ*, para encontrar la reversa del lenguaje nos basta
con definir una g: N -> Σ* tal que g(x)= {w : w = reversa(f(x))} y dado que la reversa es una funcion computable g(n) resulta computable y su imagen es L^r.

Ejercicio 9. Indicar V o F y justificar. Es decidible que:
1. Si Halt : N × N → N fuera computable entonces la complejidad de Kolmogorov C : N → N,
C(s) = min{#(P) : Ψ_P(0) = s} seria computable. Verdadero
Si Halt fuera computable, podriamos encontrar el min. P tal que  Ψ_P(0)↓ (termina) y ademas da como resultado s, pero decidir esto no es computable como ya sabemos.
2. La pertenecia de una palabra a un lenguaje computable es computable. Verdadero
Si el lenguaje es computable entonces habra una MT que podra reconocer o rechazar la palabra.
3. Todo conjunto infinito c.e. tiene un subconjunto infinito computable. Falso
Si tomamos el conjunto Wn = {x : Φn(x) ↓} es un conj. c.e pero no es computable, por lo tanto asumir que uno de sus subconjuntos es computable seria falso pues esto nos permitiria
resolver el Halting problem

Ejercicio 10. Sea APD P = (Q, Σ, δ, Γ, q0, F ) y AP S = (Q′, Σ′, δ′, Γ, q′0, F ′).
Indicar V o F y justificar.
1. L(P ) union L(S) es libre de contexto Verdadero
Los lenguajes libres de contexto estan cerrados por union
2. L(P ) interseccion L(S) es libre de contexto.Falso
Los CFL no estan cerrados por union, ej L1 = {aibjcj } y L2 = {aibicj} , L1 ∩ L2 = {aibici} no es libre de contexto
3. Para todo AP hay un APD que reconoce el mismo lenguaje. Falso
L = {ww^r} es aceptado por un APND pero no es aceptado por ningun APD 
4. Es decidible si dos AFs reconocen el mismo lenguaje o no.Verdadero
Minimizando estados deberiamos poder chequear si dos AFS son equivalentes, o en su defecto llevarlos a E.R y construir los automatas derivando las E.R 

Ejercicio 11. Dar un algoritmo que codeterminice un automata finito.
Un automata finito es codeterministico si su funcion de transicion δ: QxΣ -> Partes(Q) satisface que para todo par de estados p,q y todo a ∈ Σ no hay r tal que r ∈ δ(p,a) y
y r ∈ δ(q,a) y F consiste de un unico estado final.
El algoritmo consistiria de tomar el automata finito(determinizarlo si no lo esta ya) y luego hacer un bfs desde el estado inicial (podemos tener una tabla por si se llega a un
estado q1 con la misma transicion pero distinto tiempo de descubrimiento) y marcamos aquellos estados que son visitados por mas de un estados con la misma transicion.
Para estos creamos los estados q1' necesarios de modo que no tengamos dos estados que transicionaban al mismo estado original por el mismo simbolo, luego vamos a tener que recrear
el camino que hacia q1 con sus respectivas transiciones (paralelizamos estos caminos para no crear mas estados con llegadas de mismo simbolo y distinto estado).
ESTA MAL/INCOMPLETO: si tengo un unico Qf alcanzable desde dos estados que transicionan por el mismo simbolo, entonces los separo en dos e.f --> no cunmplo con condicion de unico
estado final. Si en cambio hago que estos dos estados finales apunten a un unico estado final con transiciones lambda cumplo con estado final unico pero no es deterministico.
IDEA 2: invertir el automata original, hacemos que el nuevo estado inicial sea el final (si el automata original tenia varios los hacemos transicionar por lambda a un unico)
y el final sera el que tenia el estado inicial, luego determinizamos el automata inverso y volvemos a invertirlo y poner el estado inicial donde estaba el original y el final
donde estaba el inicial del inverso.
Correctitud: al invertir las transiciones del automata estamos viendo quienes llegaban a el estado, aprovechando el alg. de detminizacion (que solo aplica de salida) evitamos
transiciones por el mismo simbolo haia un mismo estado, luego al hacer esto desde el estado final original aseguramos que no se llegara a el si no se cumplen estas condiciones,
y preservamos el estado original al hacerlo el final(y aseguramos que se acepta el mismo leng.), luego al invertir el automata nuevamente tendremos el automata codeterminizado.

Ejercicio 12. Dado un automata finito determnistico A = (QA, Σ, δA, q0, FA) y dado automata de pila deterministico P = (QP , Σ, Γ, δP , p0, FP ) dar un algoritmo que decida si
el lenguaje L(A) ∩ L(P ) es finito.Justificar la correctitud.
Empezamos recordando que la interseccion de un lenguaje regular (L(A)) con un libre de contexto(L(P)) da como resultado un lenguaje P' libre de contexto, luego para decidir si el
lenguaje es finito nos basta con que no se pueda bombear ninguna palabra del lenguaje de modo que este en el rango de long [n,2n).
Recordamos Pumping para CFL: α en L con |α| ≥ n la ctte de Pumping, α = rxyzs.|xyz| ≤ n y |xz| ≥ 1 Para todo i ≥ 0, la cadena rx^iyz^is pertenece a L. 
Luego es claro ver que si i>1 y sabiendo 1 <= |xz| < N debera estar en el rango antes mencionado, por lo tanto no sera finito, si en cambio las cadenas son lo suficientemente 
chicas como para no caer en el rango al ser bombeadas, entonces sera finito. Notar que basta con que una cadena al ser bombeada caiga en el rango de long [n,2n) para que no sea finito.
Luego la otra opcion es construir el automata de pila que reconoce la interseccion, y chequear si reconoce alguna cadena de longitud [N,2N).

jercicio 13. Un automata de pila no deterministico, (Q, Σ, Γ, δ, q0, Z0, F ) es un contador si Γ = {Z0, I}el sımbolo Z0 representa el valor del cero y e I representa el valor
1. En cada transicion el automata solamentepuede consultar si el contador es 0 o no. El contador no puede volverse negativo, por lo que no puede restarel valor 1 de un contador
que actualmente es 0.
Demostrar Verdadero o Falso
a. Si un lenguaje es reconocible por un automata contador entonces el lenguaje complemento tambien.Falso
Si el automata contador reconoce a L={x: x >0} entonces L^c ={x: x <0} y sabemos que el automata contador no puede contar negativos
b. Si dos lenguaje LA y LB reconocibles por automatas contadores entonces el lenguaje de su union LA ∪ LB tambien.Verdadero
MAs alla del contador, es la union de dos lenguajes libres de contexto osea que pueden ser reconocidos por un A.P, luego su union tambien pues CFL estan cerrados por union.
c. Si dos lenguaje LA y LB reconocibles por un automatas contadores entonces el lenguaje de su interseccion LA ∩ LB tambien. Falso
La interseccion de CFL no esta cerrada, por lo tanto puede dar algo no libre de contexto y no se puede dar un AP que lo reconozca.
d. Todos los lenguajes reconocibles por automatas finitos son reconocibles por automatas contadores.Verdadero 
Simplemente ignora la pila pues al ser regular no necesita contar
e. No todos los lenguajes reconocibles por un automata contador son reconocibles por un automata finito.Verdadero
Al usar la pila tiene mas potencia que un AF, luego puede contar cosas que un AF no puede, por ej {a^nb^n|n>0}.
Ayuda: Considerar como se demuestran y como se refutan las propiedades de clausura de los lenguajes libres de contexto.

Ejercicio 14. Un aut´omata de cola es un aut´omata no determin´ıstico, similar a uno de pila pero tiene una
cola en vez de una pila. Formalmente, un aut´omata de cola es M = (Q, Σ, Γ, δ, q0, F ) donde
Q es el conjunto de estados
Σ es el alfabeto de la cinta entrada
Γ el el alfabeto de cola,
δ : Q × Σ ∪ {λ} × Γ ∪ {λ} → P(Q × Γ ∪ λ) es la funci´on de transici´on
q0 ∈ Q es el estado inicial.
F ⊆ Q es el conjunto de estados finales.
Por ejemplo δ(q1, a, b) = {(q2, c), (q3, d)} dice que el estado q1 si lee a de la entrada y b est´a primero en la
cola, entonces b sale de la cola, el aut´omata pasa al estado q2, y pone c ´ultimo en la cola. Se sabe (y no es
dif´ıcil de demostrar) que los aut´omatas de cola reconocen todos los lenguajes libres de contexto.
Demostrar que los aut´omatas de cola reconocen m´as lenguajes que loa reconocibles por aut´omatas de pila.
Ayuda: dar un lenguaje que no es libre de contexto
